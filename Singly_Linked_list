//OPERATIONS ON SINGLY LINKED LIST
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data; //DATA FIELD
    struct node *next;  //ADDRESS FIELD
}*head;


void createNode(int n);
void insert_at_front(int data);
void insert_at_end(int data);
void delete_beginning();
void delete_end();
void display();


int main()
{
    int n, data,data1;
    printf("Enter the total number of nodes\n");
    scanf("%d", &n);
    createNode(n);

    printf("\nData in the list \n");
    display();
    printf("Enter data to insert at beginning\n");
    scanf("%d", &data);
    insert_at_front(data);
    display();
    printf("Enter data to insert at end\n");
    scanf("%d", &data1);
    display();
    insert_at_end(data1);
    printf("\nData in the list \n");
    display();
    printf("\nDeletion");
    delete_beginning();
    printf("\nData in the list \n");
    display();
    delete_end();
    display();

    return 0;
}

void createNode(int n)
{
    struct node *newNode, *temp;
    int data, i;

    head =(struct node*)malloc(sizeof(struct node));

    if(head == NULL)
    {
        printf("Unable to allocate memory\n");
    }
    else
    {

        printf("Enter the data of node 1\n");
        scanf("%d", &data);
        head->data=data;
        head->next=NULL;
        temp = head;
        for(i=2; i<=n; i++)
        {
            newNode = (struct node *)malloc(sizeof(struct node));
            if(newNode == NULL)
            {
                printf("Unable to allocate memory.");
                break;
            }
            else
            {
                printf("Enter the data of node %d", i);
                scanf("%d", &data);
                newNode->data = data;
                newNode->next = NULL;
                temp->next = newNode;
                temp = temp->next;
            }
        }

        printf("Singly linked list created\n");
    }
}

void insert_at_front(int data)
{
    struct node *newNode;

    newNode = (struct node*)malloc(sizeof(struct node));

    if(newNode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newNode->data = data;
        newNode->next = head;

        head = newNode;

        printf("Data  has been successfully inserted at front\n");
    }
}

void insert_at_end(int data1)
{
    struct node *newNode, *temp;

    newNode = (struct node*)malloc(sizeof(struct node));

    if(newNode == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newNode->data= data1;
        newNode->next = NULL;

        temp = head;

        while(temp != NULL && temp->next != NULL)
            temp = temp->next;

        temp->next = newNode;

        printf("Data has been successfully inserted at end\n");
    }
}

void delete_beginning()
{
    struct node *del;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        del= head;
        head = head->next;

        printf("\nData deleted = %d\n", del->data);

        free(del);

        printf("Node deleted successfully\n");
    }
}

void delete_end()
{
    struct node *del, *secondLastNode;

    if(head == NULL)
    {
        printf("List is already empty.");
    }
    else
    {
        del=head;
        secondLastNode = head;
        while(del->next != NULL)
        {
            secondLastNode=del;
            del=del->next;
        }

        if(del==head)
        {
            head = NULL;
        }
        else
        {
            secondLastNode->next = NULL;
        }

        free(del);

        printf("Node has been successfully deleted\n");
    }
}


void display()
{
    struct node *temp;
    if(head == NULL)
    {
        printf("List is empty.");
    }
    else
    {
        temp = head;
        while(temp != NULL)
        {
            printf("Data = %d\n", temp->data);
            temp = temp->next;
        }
    }
}
